
Decodificador_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080020a  0080020a  00000368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef6  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d31  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bf  00000000  00000000  00002057  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00002518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000687  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ad  00000000  00000000  00002c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ec       	ldi	r30, 0xCA	; 202
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 30       	cpi	r26, 0x0F	; 15
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ae d0       	rcall	.+348    	; 0x27c <main>
 120:	d2 c0       	rjmp	.+420    	; 0x2c6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Display_Inicializa>:
uint8_t display_buffer[N_DISPLAYS];

//Funciones
void Display_Inicializa(void){
	//Inicalizar Diplays
	DISPLAY_TRIS=0xff;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	80 bb       	out	0x10, r24	; 16
	DISPLAY_PORT=0x00;
 128:	11 ba       	out	0x11, r1	; 17
	//Enables
	ENABLE_TRIS|=MASK_Enable;
 12a:	e7 e0       	ldi	r30, 0x07	; 7
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z
 130:	8f 60       	ori	r24, 0x0F	; 15
 132:	80 83       	st	Z, r24
	ENABLE_PORT&=~MASK_Enable;
 134:	e8 e0       	ldi	r30, 0x08	; 8
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	80 81       	ld	r24, Z
 13a:	80 7f       	andi	r24, 0xF0	; 240
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <Display_Decodificador_Digito_Decimal>:
	}

uint8_t Display_Decodificador_Digito_Decimal(uint8_t valor){
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	2a 97       	sbiw	r28, 0x0a	; 10
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
	uint8_t salida;
	uint8_t tabla_display[]={ 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
 154:	9a e0       	ldi	r25, 0x0A	; 10
 156:	e0 e0       	ldi	r30, 0x00	; 0
 158:	f2 e0       	ldi	r31, 0x02	; 2
 15a:	de 01       	movw	r26, r28
 15c:	11 96       	adiw	r26, 0x01	; 1
 15e:	01 90       	ld	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	9a 95       	dec	r25
 164:	e1 f7       	brne	.-8      	; 0x15e <Display_Decodificador_Digito_Decimal+0x1e>
	
	if (valor<10){
 166:	8a 30       	cpi	r24, 0x0A	; 10
 168:	28 f4       	brcc	.+10     	; 0x174 <Display_Decodificador_Digito_Decimal+0x34>
		salida=tabla_display[valor];
 16a:	fe 01       	movw	r30, r28
 16c:	e8 0f       	add	r30, r24
 16e:	f1 1d       	adc	r31, r1
 170:	81 81       	ldd	r24, Z+1	; 0x01
 172:	01 c0       	rjmp	.+2      	; 0x176 <Display_Decodificador_Digito_Decimal+0x36>
		}else{
		salida=0x00;
 174:	80 e0       	ldi	r24, 0x00	; 0
	}
	return salida;
}
 176:	2a 96       	adiw	r28, 0x0a	; 10
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <Display_Decodificador_Entero_Decimal>:

void Display_Decodificador_Entero_Decimal(uint16_t bin){
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ec 01       	movw	r28, r24
 196:	0b e0       	ldi	r16, 0x0B	; 11
 198:	12 e0       	ldi	r17, 0x02	; 2
 19a:	0f 2e       	mov	r0, r31
 19c:	ff e0       	ldi	r31, 0x0F	; 15
 19e:	ef 2e       	mov	r14, r31
 1a0:	f2 e0       	ldi	r31, 0x02	; 2
 1a2:	ff 2e       	mov	r15, r31
 1a4:	f0 2d       	mov	r31, r0
	for(uint8_t i=0; i<N_DISPLAYS; i++){
		display_buffer[i]=Display_Decodificador_Digito_Decimal(bin % 10);
 1a6:	9e 01       	movw	r18, r28
 1a8:	ad ec       	ldi	r26, 0xCD	; 205
 1aa:	bc ec       	ldi	r27, 0xCC	; 204
 1ac:	7d d0       	rcall	.+250    	; 0x2a8 <__umulhisi3>
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	9c 01       	movw	r18, r24
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	82 0f       	add	r24, r18
 1ce:	93 1f       	adc	r25, r19
 1d0:	2c 2f       	mov	r18, r28
 1d2:	28 1b       	sub	r18, r24
 1d4:	82 2f       	mov	r24, r18
 1d6:	b4 df       	rcall	.-152    	; 0x140 <Display_Decodificador_Digito_Decimal>
 1d8:	f8 01       	movw	r30, r16
 1da:	81 93       	st	Z+, r24
 1dc:	8f 01       	movw	r16, r30
		bin /=10;
 1de:	9e 01       	movw	r18, r28
 1e0:	ad ec       	ldi	r26, 0xCD	; 205
 1e2:	bc ec       	ldi	r27, 0xCC	; 204
 1e4:	61 d0       	rcall	.+194    	; 0x2a8 <__umulhisi3>
 1e6:	ec 01       	movw	r28, r24
 1e8:	d6 95       	lsr	r29
 1ea:	c7 95       	ror	r28
 1ec:	d6 95       	lsr	r29
 1ee:	c7 95       	ror	r28
 1f0:	d6 95       	lsr	r29
 1f2:	c7 95       	ror	r28
	}
	return salida;
}

void Display_Decodificador_Entero_Decimal(uint16_t bin){
	for(uint8_t i=0; i<N_DISPLAYS; i++){
 1f4:	ee 15       	cp	r30, r14
 1f6:	ff 05       	cpc	r31, r15
 1f8:	b1 f6       	brne	.-84     	; 0x1a6 <Display_Decodificador_Entero_Decimal+0x1e>
		display_buffer[i]=Display_Decodificador_Digito_Decimal(bin % 10);
		bin /=10;
	}
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	08 95       	ret

00000208 <Display_Gestion_Habilitadores>:

void Display_Gestion_Habilitadores(void){
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	00 d0       	rcall	.+0      	; 0x20e <Display_Gestion_Habilitadores+0x6>
 20e:	1f 92       	push	r1
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
	static uint8_t index_display=0;	// definir indice
	uint8_t tabla_enables[N_DISPLAYS]={Enable_0,Enable_1,Enable_2,Enable_3};
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	8a 83       	std	Y+2, r24	; 0x02
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	8b 83       	std	Y+3, r24	; 0x03
 220:	1c 82       	std	Y+4, r1	; 0x04
		
	ENABLE_PORT&=~MASK_Enable;	//Limpiar todo
 222:	a8 e0       	ldi	r26, 0x08	; 8
 224:	b1 e0       	ldi	r27, 0x01	; 1
 226:	8c 91       	ld	r24, X
 228:	80 7f       	andi	r24, 0xF0	; 240
 22a:	8c 93       	st	X, r24
	DISPLAY_PORT=display_buffer[index_display];	//Poner el valor
 22c:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end>
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	e5 5f       	subi	r30, 0xF5	; 245
 234:	fd 4f       	sbci	r31, 0xFD	; 253
 236:	80 81       	ld	r24, Z
 238:	81 bb       	out	0x11, r24	; 17
	ENABLE_PORT |= 1<<tabla_enables[index_display];	//Recien moverlo
 23a:	2c 91       	ld	r18, X
 23c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 240:	fe 01       	movw	r30, r28
 242:	e8 0f       	add	r30, r24
 244:	f1 1d       	adc	r31, r1
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 80       	ldd	r0, Z+1	; 0x01
 24c:	02 c0       	rjmp	.+4      	; 0x252 <Display_Gestion_Habilitadores+0x4a>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <Display_Gestion_Habilitadores+0x46>
 256:	82 2b       	or	r24, r18
 258:	8c 93       	st	X, r24
	index_display++;	//Aunmentar conteo
 25a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
	if (index_display==N_DISPLAYS) {index_display=0;} //REiniciar conteo
 260:	84 30       	cpi	r24, 0x04	; 4
 262:	19 f0       	breq	.+6      	; 0x26a <Display_Gestion_Habilitadores+0x62>
	uint8_t tabla_enables[N_DISPLAYS]={Enable_0,Enable_1,Enable_2,Enable_3};
		
	ENABLE_PORT&=~MASK_Enable;	//Limpiar todo
	DISPLAY_PORT=display_buffer[index_display];	//Poner el valor
	ENABLE_PORT |= 1<<tabla_enables[index_display];	//Recien moverlo
	index_display++;	//Aunmentar conteo
 264:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
 268:	02 c0       	rjmp	.+4      	; 0x26e <Display_Gestion_Habilitadores+0x66>
	if (index_display==N_DISPLAYS) {index_display=0;} //REiniciar conteo
 26a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__data_end>
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <main>:
//Funciones


int main(void)
{
	Display_Inicializa();
 27c:	53 df       	rcall	.-346    	; 0x124 <Display_Inicializa>
    while (1){
		for (uint16_t franciaco=0; franciaco<65535; franciaco++){		
 27e:	00 e0       	ldi	r16, 0x00	; 0
 280:	10 e0       	ldi	r17, 0x00	; 0
			Display_Decodificador_Entero_Decimal(franciaco);
 282:	c8 01       	movw	r24, r16
 284:	81 df       	rcall	.-254    	; 0x188 <Display_Decodificador_Entero_Decimal>
			for (uint8_t pepe=0; pepe<(125/20); pepe++){
				Display_Gestion_Habilitadores();
 286:	c6 e0       	ldi	r28, 0x06	; 6
 288:	bf df       	rcall	.-130    	; 0x208 <Display_Gestion_Habilitadores>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	8f e7       	ldi	r24, 0x7F	; 127
 28c:	9e e3       	ldi	r25, 0x3E	; 62
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x12>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x18>
 294:	00 00       	nop
 296:	c1 50       	subi	r28, 0x01	; 1
{
	Display_Inicializa();
    while (1){
		for (uint16_t franciaco=0; franciaco<65535; franciaco++){		
			Display_Decodificador_Entero_Decimal(franciaco);
			for (uint8_t pepe=0; pepe<(125/20); pepe++){
 298:	b9 f7       	brne	.-18     	; 0x288 <main+0xc>

int main(void)
{
	Display_Inicializa();
    while (1){
		for (uint16_t franciaco=0; franciaco<65535; franciaco++){		
 29a:	0f 5f       	subi	r16, 0xFF	; 255
 29c:	1f 4f       	sbci	r17, 0xFF	; 255
 29e:	0f 3f       	cpi	r16, 0xFF	; 255
 2a0:	9f ef       	ldi	r25, 0xFF	; 255
 2a2:	19 07       	cpc	r17, r25
 2a4:	71 f7       	brne	.-36     	; 0x282 <main+0x6>
 2a6:	eb cf       	rjmp	.-42     	; 0x27e <main+0x2>

000002a8 <__umulhisi3>:
 2a8:	a2 9f       	mul	r26, r18
 2aa:	b0 01       	movw	r22, r0
 2ac:	b3 9f       	mul	r27, r19
 2ae:	c0 01       	movw	r24, r0
 2b0:	a3 9f       	mul	r26, r19
 2b2:	70 0d       	add	r23, r0
 2b4:	81 1d       	adc	r24, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	91 1d       	adc	r25, r1
 2ba:	b2 9f       	mul	r27, r18
 2bc:	70 0d       	add	r23, r0
 2be:	81 1d       	adc	r24, r1
 2c0:	11 24       	eor	r1, r1
 2c2:	91 1d       	adc	r25, r1
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
