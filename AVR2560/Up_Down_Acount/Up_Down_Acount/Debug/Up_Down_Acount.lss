
Up_Down_Acount.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000304  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080020c  0080020c  000003a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122b  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dcb  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cb  00000000  00000000  000024ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b2  00000000  00000000  00002dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fc  00000000  00000000  00003572  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000386e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 31       	cpi	r26, 0x11	; 17
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b4 d0       	rcall	.+360    	; 0x288 <main>
 120:	ef c0       	rjmp	.+478    	; 0x300 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Rising_Edge_Button1_Pull_Up>:
		present_state = BUTTON_PRESS_PULL_UP(BUTTON1);
		lowering_edge = !present_state && previous_state;
		previous_state = present_state;
	
	return lowering_edge;
}
 124:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	28 2f       	mov	r18, r24
 12c:	20 74       	andi	r18, 0x40	; 64
 12e:	86 fd       	sbrc	r24, 6
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	21 11       	cpse	r18, r1
 134:	07 c0       	rjmp	.+14     	; 0x144 <Rising_Edge_Button1_Pull_Up+0x20>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <previous_state.1621>
 13c:	22 23       	and	r18, r18
 13e:	19 f0       	breq	.+6      	; 0x146 <Rising_Edge_Button1_Pull_Up+0x22>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	01 c0       	rjmp	.+2      	; 0x146 <Rising_Edge_Button1_Pull_Up+0x22>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <previous_state.1621>
 14a:	08 95       	ret

0000014c <Rising_Edge_Button2_Pull_Up>:
uint8_t Rising_Edge_Button2_Pull_Up(void){
	uint8_t rising_edge;
	static uint8_t previous_state = 1;
	uint8_t present_state;
	
		present_state = BUTTON_PRESS_PULL_UP(BUTTON2);
 14c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 150:	98 2f       	mov	r25, r24
 152:	90 95       	com	r25
 154:	99 1f       	adc	r25, r25
 156:	99 27       	eor	r25, r25
 158:	99 1f       	adc	r25, r25
		rising_edge = present_state && !previous_state;
 15a:	88 23       	and	r24, r24
 15c:	3c f0       	brlt	.+14     	; 0x16c <Rising_Edge_Button2_Pull_Up+0x20>
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 164:	22 23       	and	r18, r18
 166:	19 f0       	breq	.+6      	; 0x16e <Rising_Edge_Button2_Pull_Up+0x22>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	01 c0       	rjmp	.+2      	; 0x16e <Rising_Edge_Button2_Pull_Up+0x22>
 16c:	80 e0       	ldi	r24, 0x00	; 0
		previous_state = present_state;
 16e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	return rising_edge;
}
 172:	08 95       	ret

00000174 <Display_Inicializa>:
		salida=tabla_display[valor];
		}else{
		salida=0x00;
	}
	return salida;
}
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	80 bb       	out	0x10, r24	; 16
 178:	11 ba       	out	0x11, r1	; 17
 17a:	e7 e0       	ldi	r30, 0x07	; 7
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	80 81       	ld	r24, Z
 180:	8f 60       	ori	r24, 0x0F	; 15
 182:	80 83       	st	Z, r24
 184:	e8 e0       	ldi	r30, 0x08	; 8
 186:	f1 e0       	ldi	r31, 0x01	; 1
 188:	80 81       	ld	r24, Z
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	80 83       	st	Z, r24
 18e:	08 95       	ret

00000190 <Display_Decodificador_Entero_Decimal>:

void Display_Decodificador_Entero_Decimal(uint16_t bin){
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ac 01       	movw	r20, r24
 19c:	cd e0       	ldi	r28, 0x0D	; 13
 19e:	d2 e0       	ldi	r29, 0x02	; 2
 1a0:	01 e1       	ldi	r16, 0x11	; 17
 1a2:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t salida;
	
	if (valor<10){
		salida=tabla_display[valor];
		}else{
		salida=0x00;
 1a4:	f1 2c       	mov	r15, r1
	return salida;
}

void Display_Decodificador_Entero_Decimal(uint16_t bin){
	for(uint8_t i=0; i<N_DISPLAYS; i++){
		display_buffer[i]=Display_Decodificador_Digito_Decimal(bin % 10);
 1a6:	9a 01       	movw	r18, r20
 1a8:	ad ec       	ldi	r26, 0xCD	; 205
 1aa:	bc ec       	ldi	r27, 0xCC	; 204
 1ac:	9a d0       	rcall	.+308    	; 0x2e2 <__umulhisi3>
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	9c 01       	movw	r18, r24
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	82 0f       	add	r24, r18
 1ce:	93 1f       	adc	r25, r19
 1d0:	9a 01       	movw	r18, r20
 1d2:	28 1b       	sub	r18, r24
 1d4:	39 0b       	sbc	r19, r25
 1d6:	c9 01       	movw	r24, r18
	}

uint8_t Display_Decodificador_Digito_Decimal(uint8_t valor){
	uint8_t salida;
	
	if (valor<10){
 1d8:	2a 30       	cpi	r18, 0x0A	; 10
 1da:	30 f4       	brcc	.+12     	; 0x1e8 <Display_Decodificador_Entero_Decimal+0x58>
		salida=tabla_display[valor];
 1dc:	99 27       	eor	r25, r25
 1de:	fc 01       	movw	r30, r24
 1e0:	ee 5f       	subi	r30, 0xFE	; 254
 1e2:	fd 4f       	sbci	r31, 0xFD	; 253
 1e4:	80 81       	ld	r24, Z
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <Display_Decodificador_Entero_Decimal+0x5a>
		}else{
		salida=0x00;
 1e8:	8f 2d       	mov	r24, r15
	return salida;
}

void Display_Decodificador_Entero_Decimal(uint16_t bin){
	for(uint8_t i=0; i<N_DISPLAYS; i++){
		display_buffer[i]=Display_Decodificador_Digito_Decimal(bin % 10);
 1ea:	89 93       	st	Y+, r24
		bin /=10;
 1ec:	9a 01       	movw	r18, r20
 1ee:	ad ec       	ldi	r26, 0xCD	; 205
 1f0:	bc ec       	ldi	r27, 0xCC	; 204
 1f2:	77 d0       	rcall	.+238    	; 0x2e2 <__umulhisi3>
 1f4:	ac 01       	movw	r20, r24
 1f6:	56 95       	lsr	r21
 1f8:	47 95       	ror	r20
 1fa:	56 95       	lsr	r21
 1fc:	47 95       	ror	r20
 1fe:	56 95       	lsr	r21
 200:	47 95       	ror	r20
	}
	return salida;
}

void Display_Decodificador_Entero_Decimal(uint16_t bin){
	for(uint8_t i=0; i<N_DISPLAYS; i++){
 202:	c0 17       	cp	r28, r16
 204:	d1 07       	cpc	r29, r17
 206:	79 f6       	brne	.-98     	; 0x1a6 <Display_Decodificador_Entero_Decimal+0x16>
		display_buffer[i]=Display_Decodificador_Digito_Decimal(bin % 10);
		bin /=10;
	}
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	08 95       	ret

00000214 <Display_Gestion_Habilitadores>:

void Display_Gestion_Habilitadores(void){
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	00 d0       	rcall	.+0      	; 0x21a <Display_Gestion_Habilitadores+0x6>
 21a:	1f 92       	push	r1
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
	static uint8_t index_display=0;	// definir indice
	uint8_t tabla_enables[N_DISPLAYS]={Enable_0,Enable_1,Enable_2,Enable_3};
 220:	19 82       	std	Y+1, r1	; 0x01
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	8a 83       	std	Y+2, r24	; 0x02
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	8b 83       	std	Y+3, r24	; 0x03
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	8c 83       	std	Y+4, r24	; 0x04
		
	ENABLE_PORT&=~MASK_Enable;	//Limpiar todo
 22e:	a8 e0       	ldi	r26, 0x08	; 8
 230:	b1 e0       	ldi	r27, 0x01	; 1
 232:	8c 91       	ld	r24, X
 234:	80 7f       	andi	r24, 0xF0	; 240
 236:	8c 93       	st	X, r24
	DISPLAY_PORT=display_buffer[index_display];	//Poner el valor
 238:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end>
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	e3 5f       	subi	r30, 0xF3	; 243
 240:	fd 4f       	sbci	r31, 0xFD	; 253
 242:	80 81       	ld	r24, Z
 244:	81 bb       	out	0x11, r24	; 17
	ENABLE_PORT |= 1<<tabla_enables[index_display];	//Recien moverlo
 246:	2c 91       	ld	r18, X
 248:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 24c:	fe 01       	movw	r30, r28
 24e:	e8 0f       	add	r30, r24
 250:	f1 1d       	adc	r31, r1
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	01 80       	ldd	r0, Z+1	; 0x01
 258:	02 c0       	rjmp	.+4      	; 0x25e <Display_Gestion_Habilitadores+0x4a>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <Display_Gestion_Habilitadores+0x46>
 262:	82 2b       	or	r24, r18
 264:	8c 93       	st	X, r24
	index_display++;	//Aunmentar conteo
 266:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 26a:	8f 5f       	subi	r24, 0xFF	; 255
	if (index_display==N_DISPLAYS) {index_display=0;} //REiniciar conteo
 26c:	84 30       	cpi	r24, 0x04	; 4
 26e:	19 f0       	breq	.+6      	; 0x276 <Display_Gestion_Habilitadores+0x62>
	uint8_t tabla_enables[N_DISPLAYS]={Enable_0,Enable_1,Enable_2,Enable_3};
		
	ENABLE_PORT&=~MASK_Enable;	//Limpiar todo
	DISPLAY_PORT=display_buffer[index_display];	//Poner el valor
	ENABLE_PORT |= 1<<tabla_enables[index_display];	//Recien moverlo
	index_display++;	//Aunmentar conteo
 270:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
 274:	02 c0       	rjmp	.+4      	; 0x27a <Display_Gestion_Habilitadores+0x66>
	if (index_display==N_DISPLAYS) {index_display=0;} //REiniciar conteo
 276:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <main>:
int main(void){
	// Variables
	uint8_t Conteo=0;
	
	//Inicializacion
	DDR_LED |= (1<<LED);
 288:	85 9a       	sbi	0x10, 5	; 16
	Display_Inicializa();
 28a:	74 df       	rcall	.-280    	; 0x174 <Display_Inicializa>
#define READ_LED(A)		PINK_LED &= ~(1<<LED)

/* funciones */
int main(void){
	// Variables
	uint8_t Conteo=0;
 28c:	d0 e0       	ldi	r29, 0x00	; 0
	DDR_LED |= (1<<LED);
	Display_Inicializa();
	
    while (1){
		
		if (Rising_Edge_Button1_Pull_Up()){
 28e:	10 e2       	ldi	r17, 0x20	; 32
 290:	49 df       	rcall	.-366    	; 0x124 <Rising_Edge_Button1_Pull_Up>
 292:	88 23       	and	r24, r24
 294:	49 f0       	breq	.+18     	; 0x2a8 <main+0x20>
			LED_TOUGGLE(LED);
 296:	81 b3       	in	r24, 0x11	; 17
 298:	81 27       	eor	r24, r17
 29a:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	8f e3       	ldi	r24, 0x3F	; 63
 29e:	9f e1       	ldi	r25, 0x1F	; 31
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x18>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x1e>
			_delay_ms(2);	
		}
		
		if (Rising_Edge_Button2_Pull_Up()){
 2a6:	00 00       	nop
 2a8:	51 df       	rcall	.-350    	; 0x14c <Rising_Edge_Button2_Pull_Up>
 2aa:	88 23       	and	r24, r24
 2ac:	61 f0       	breq	.+24     	; 0x2c6 <main+0x3e>
			if (READ_LED(LED)){
 2ae:	81 b3       	in	r24, 0x11	; 17
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	81 bb       	out	0x11, r24	; 17
 2b4:	88 23       	and	r24, r24
 2b6:	21 f0       	breq	.+8      	; 0x2c0 <main+0x38>
				if (Conteo == 255){Conteo = 0;} 
 2b8:	df 3f       	cpi	r29, 0xFF	; 255
 2ba:	21 f0       	breq	.+8      	; 0x2c4 <main+0x3c>
				else{Conteo++;}
 2bc:	df 5f       	subi	r29, 0xFF	; 255
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <main+0x3e>
			}
			else{
				if (Conteo == 0){Conteo = 255;}
				else{Conteo--;}
 2c0:	d1 50       	subi	r29, 0x01	; 1
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <main+0x3e>
			}
		}
		
		Display_Decodificador_Entero_Decimal(Conteo);
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
 2c6:	8d 2f       	mov	r24, r29
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	62 df       	rcall	.-316    	; 0x190 <Display_Decodificador_Entero_Decimal>
		for (uint8_t pepe=0; pepe<(125/20); pepe++){
			Display_Gestion_Habilitadores();
 2cc:	c6 e0       	ldi	r28, 0x06	; 6
 2ce:	a2 df       	rcall	.-188    	; 0x214 <Display_Gestion_Habilitadores>
 2d0:	8f e7       	ldi	r24, 0x7F	; 127
 2d2:	9e e3       	ldi	r25, 0x3E	; 62
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0x4c>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x52>
 2da:	00 00       	nop
 2dc:	c1 50       	subi	r28, 0x01	; 1
				else{Conteo--;}
			}
		}
		
		Display_Decodificador_Entero_Decimal(Conteo);
		for (uint8_t pepe=0; pepe<(125/20); pepe++){
 2de:	b9 f7       	brne	.-18     	; 0x2ce <main+0x46>
 2e0:	d7 cf       	rjmp	.-82     	; 0x290 <main+0x8>

000002e2 <__umulhisi3>:
 2e2:	a2 9f       	mul	r26, r18
 2e4:	b0 01       	movw	r22, r0
 2e6:	b3 9f       	mul	r27, r19
 2e8:	c0 01       	movw	r24, r0
 2ea:	a3 9f       	mul	r26, r19
 2ec:	70 0d       	add	r23, r0
 2ee:	81 1d       	adc	r24, r1
 2f0:	11 24       	eor	r1, r1
 2f2:	91 1d       	adc	r25, r1
 2f4:	b2 9f       	mul	r27, r18
 2f6:	70 0d       	add	r23, r0
 2f8:	81 1d       	adc	r24, r1
 2fa:	11 24       	eor	r1, r1
 2fc:	91 1d       	adc	r25, r1
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
